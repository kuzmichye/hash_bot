import re
import hashlib
import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ .env ===
PHONE_SALT = os.getenv("PHONE_SALT", "default_salt")
BOT_TOKEN = os.getenv("BOT_TOKEN")

def normalize_phone(phone: str) -> str:
    if not phone:
        raise ValueError("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    phone = re.sub(r'\s+', '', phone.strip())
    if not phone.startswith('+'):
        raise ValueError("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +")
    if not re.match(r'^\+\d+$', phone):
        raise ValueError("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ +")
    return phone

def hash_phone(phone: str) -> str:
    normalized_phone = normalize_phone(phone)
    return hashlib.sha512((normalized_phone + PHONE_SALT).encode()).hexdigest()

# === aiogram 3 ===
logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message(F.text == "/start")
async def start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +XXXXXXXXXX")

# —ç—Ö–æ/—Ö—ç—à
@dp.message(F.text)
async def echo_or_hash(message: Message):
    text = message.text.strip()
    if text.startswith("+") and re.match(r'^\+\d+$', text):
        try:
            hashed = hash_phone(text)
            await message.answer(f"üîë –•—ç—à –Ω–æ–º–µ—Ä–∞:\n{hashed}")
        except ValueError as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    else:
        await message.answer(f"–≠—Ö–æ: {text}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
